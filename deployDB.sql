-- MySQL Script generated by MySQL Workbench
-- Thu May 24 02:51:55 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema Kassensystem
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema Kassensystem
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `Kassensystem` DEFAULT CHARACTER SET utf8 ;
USE `Kassensystem` ;

-- -----------------------------------------------------
-- Table `Kassensystem`.`Department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Department` (
  `departmentID` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(50) NOT NULL,
  `validFrom` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NOT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  UNIQUE INDEX `department_UNIQUE` (`departmentID` ASC, `title` ASC),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC, `validTill` ASC),
  PRIMARY KEY (`departmentID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`productCategory`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`productCategory` (
  `productCategoryID` INT NOT NULL AUTO_INCREMENT,
  `departmentID` INT NOT NULL,
  `productCategoryName` VARCHAR(100) NOT NULL,
  UNIQUE INDEX `productCategoryName_UNIQUE` (`productCategoryName` ASC),
  PRIMARY KEY (`productCategoryID`),
  INDEX `fk_productCategory_Department1_idx` (`departmentID` ASC),
  CONSTRAINT `fk_productCategory_Department1`
    FOREIGN KEY (`departmentID`)
    REFERENCES `Kassensystem`.`Department` (`departmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Title`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Title` (
  `titleID` INT NOT NULL AUTO_INCREMENT,
  `title` VARCHAR(70) NOT NULL,
  PRIMARY KEY (`titleID`),
  UNIQUE INDEX `title_UNIQUE` (`title` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Customer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Customer` (
  `customerID` INT NOT NULL AUTO_INCREMENT,
  `titleID` INT NOT NULL,
  `firstName` VARCHAR(100) NOT NULL,
  `lastName` VARCHAR(100) NOT NULL,
  `companyName` VARCHAR(100) NULL,
  `email` VARCHAR(70) NOT NULL,
  `phoneNumber` VARCHAR(50) NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`customerID`),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC, `isValid` ASC),
  INDEX `fk_Customer_Title1_idx` (`titleID` ASC),
  CONSTRAINT `fk_Customer_Title1`
    FOREIGN KEY (`titleID`)
    REFERENCES `Kassensystem`.`Title` (`titleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Role`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Role` (
  `roleID` INT NOT NULL AUTO_INCREMENT,
  `role` VARCHAR(45) NULL,
  PRIMARY KEY (`roleID`),
  UNIQUE INDEX `role_UNIQUE` (`role` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`UserRole`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`UserRole` (
  `userRoleID` INT NOT NULL AUTO_INCREMENT,
  `role` VARCHAR(70) NOT NULL,
  PRIMARY KEY (`userRoleID`),
  UNIQUE INDEX `role_UNIQUE` (`role` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`User`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`User` (
  `userID` INT NOT NULL AUTO_INCREMENT,
  `userRoleID` INT NOT NULL,
  `login` VARCHAR(100) NOT NULL,
  `passw` VARCHAR(100) NOT NULL,
  `validFrom` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NOT NULL DEFAULT 1,
  `lastID` VARCHAR(45) NOT NULL DEFAULT 0,
  PRIMARY KEY (`userID`),
  UNIQUE INDEX `login_UNIQUE` (`login` ASC, `validTill` ASC),
  INDEX `fk_User_UserRole1_idx` (`userRoleID` ASC),
  CONSTRAINT `fk_User_UserRole1`
    FOREIGN KEY (`userRoleID`)
    REFERENCES `Kassensystem`.`UserRole` (`userRoleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Employee`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Employee` (
  `employeeID` INT NOT NULL AUTO_INCREMENT,
  `departmentID` INT NULL,
  `roleID` INT NULL DEFAULT 0,
  `userID` INT NULL,
  `firstName` VARCHAR(50) NOT NULL,
  `lastName` VARCHAR(50) NOT NULL,
  `firmaEmail` VARCHAR(50) NOT NULL,
  `phoneNumber` VARCHAR(50) NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`employeeID`),
  INDEX `fk_Employee_Department1_idx` (`departmentID` ASC),
  INDEX `fk_Employee_Role1_idx` (`roleID` ASC),
  INDEX `fk_Employee_User1_idx` (`userID` ASC),
  UNIQUE INDEX `firmaEmail_UNIQUE` (`firmaEmail` ASC),
  CONSTRAINT `fk_Employee_Department1`
    FOREIGN KEY (`departmentID`)
    REFERENCES `Kassensystem`.`Department` (`departmentID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employee_Role1`
    FOREIGN KEY (`roleID`)
    REFERENCES `Kassensystem`.`Role` (`roleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Employee_User1`
    FOREIGN KEY (`userID`)
    REFERENCES `Kassensystem`.`User` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Product`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Product` (
  `productID` INT NOT NULL AUTO_INCREMENT,
  `productCategoryID` INT NOT NULL,
  `productName` VARCHAR(200) NOT NULL,
  `price` DECIMAL(20,5) UNSIGNED NOT NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL,
  PRIMARY KEY (`productID`),
  UNIQUE INDEX `productName_UNIQUE` (`productName` ASC, `isValid` ASC, `productCategoryID` ASC, `price` ASC, `validTill` ASC),
  INDEX `fk_Product_productCategory1_idx` (`productCategoryID` ASC),
  CONSTRAINT `fk_Product_productCategory1`
    FOREIGN KEY (`productCategoryID`)
    REFERENCES `Kassensystem`.`productCategory` (`productCategoryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Deliverer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Deliverer` (
  `delivererID` INT NOT NULL AUTO_INCREMENT,
  `companyName` VARCHAR(100) NOT NULL,
  `email` VARCHAR(70) NULL,
  `phoneNumber` VARCHAR(50) NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`delivererID`),
  UNIQUE INDEX `companyName_UNIQUE` (`companyName` ASC, `isValid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`ProductHasDeliverer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`ProductHasDeliverer` (
  `productID` INT NOT NULL,
  `delivererID` INT NOT NULL,
  PRIMARY KEY (`productID`, `delivererID`),
  INDEX `fk_ProductHasDeliverer_Deliverer1_idx` (`delivererID` ASC),
  CONSTRAINT `fk_ProductHasDeliverer_Product1`
    FOREIGN KEY (`productID`)
    REFERENCES `Kassensystem`.`Product` (`productID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProductHasDeliverer_Deliverer1`
    FOREIGN KEY (`delivererID`)
    REFERENCES `Kassensystem`.`Deliverer` (`delivererID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Country`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Country` (
  `countryID` INT NOT NULL AUTO_INCREMENT,
  `countryName` VARCHAR(70) NULL,
  PRIMARY KEY (`countryID`),
  UNIQUE INDEX `countryName_UNIQUE` (`countryName` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Place`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Place` (
  `placeID` INT NOT NULL AUTO_INCREMENT,
  `countryID` INT NOT NULL,
  `zip` INT NOT NULL,
  `placeName` VARCHAR(45) NOT NULL,
  UNIQUE INDEX `zip_UNIQUE` (`zip` ASC, `placeName` ASC),
  PRIMARY KEY (`placeID`),
  INDEX `fk_Place_Country1_idx` (`countryID` ASC),
  CONSTRAINT `fk_Place_Country1`
    FOREIGN KEY (`countryID`)
    REFERENCES `Kassensystem`.`Country` (`countryID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`DelivererAddress`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`DelivererAddress` (
  `delivererAddressID` INT NOT NULL AUTO_INCREMENT,
  `delivererID` INT NOT NULL,
  `placeID` INT NOT NULL,
  `street` VARCHAR(100) NULL,
  `houseNumber` VARCHAR(30) NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`delivererAddressID`),
  INDEX `fk_DelivererAddress_Deliverer1_idx` (`delivererID` ASC),
  INDEX `fk_DelivererAddress_Place1_idx` (`placeID` ASC),
  UNIQUE INDEX `deliverer_UNIQUE` (`placeID` ASC, `street` ASC, `houseNumber` ASC, `isValid` ASC),
  CONSTRAINT `fk_DelivererAddress_Deliverer1`
    FOREIGN KEY (`delivererID`)
    REFERENCES `Kassensystem`.`Deliverer` (`delivererID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_DelivererAddress_Place1`
    FOREIGN KEY (`placeID`)
    REFERENCES `Kassensystem`.`Place` (`placeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Tax`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Tax` (
  `taxID` INT NOT NULL AUTO_INCREMENT,
  `VAT` DECIMAL(4,2) NULL,
  `validFrom` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  PRIMARY KEY (`taxID`),
  UNIQUE INDEX `VAT_UNIQUE` (`VAT` ASC, `isValid` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Invoice`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Invoice` (
  `invoiceID` INT NOT NULL AUTO_INCREMENT,
  `employeeID` INT NOT NULL,
  `customerID` INT NOT NULL,
  `taxID` INT NOT NULL,
  `creatingDate` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`invoiceID`),
  INDEX `fk_Invoice_Employee1_idx` (`employeeID` ASC),
  INDEX `fk_Invoice_Customer1_idx` (`customerID` ASC),
  UNIQUE INDEX `employee_UNIQUE` (`employeeID` ASC, `creatingDate` ASC),
  INDEX `fk_Invoice_Tax1_idx` (`taxID` ASC),
  CONSTRAINT `fk_Invoice_Employee1`
    FOREIGN KEY (`employeeID`)
    REFERENCES `Kassensystem`.`Employee` (`employeeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Invoice_Customer1`
    FOREIGN KEY (`customerID`)
    REFERENCES `Kassensystem`.`Customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Invoice_Tax1`
    FOREIGN KEY (`taxID`)
    REFERENCES `Kassensystem`.`Tax` (`taxID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`InvoicePosition`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`InvoicePosition` (
  `invoicePositionID` INT NOT NULL AUTO_INCREMENT,
  `productID` INT NOT NULL,
  `invoiceID` INT NOT NULL,
  `amount` VARCHAR(45) NULL,
  PRIMARY KEY (`invoicePositionID`),
  INDEX `fk_Invoice_position_Product1_idx` (`productID` ASC),
  INDEX `fk_InvoicePosition_Invoice1_idx` (`invoiceID` ASC),
  CONSTRAINT `fk_Invoice_position_Product1`
    FOREIGN KEY (`productID`)
    REFERENCES `Kassensystem`.`Product` (`productID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InvoicePosition_Invoice1`
    FOREIGN KEY (`invoiceID`)
    REFERENCES `Kassensystem`.`Invoice` (`invoiceID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`CustomerAddress`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`CustomerAddress` (
  `customerAddressID` INT NOT NULL AUTO_INCREMENT,
  `customerID` INT NOT NULL,
  `placeID` INT NOT NULL,
  `street` VARCHAR(100) NULL,
  `houseNumber` VARCHAR(30) NULL,
  `validFrom` DATETIME NULL DEFAULT CURRENT_TIMESTAMP,
  `validTill` DATETIME NULL DEFAULT NULL ON UPDATE CURRENT_TIMESTAMP,
  `isValid` TINYINT NULL DEFAULT 1,
  `lastID` INT NOT NULL DEFAULT 0,
  PRIMARY KEY (`customerAddressID`),
  INDEX `fk_CustomerAddress_Customer1_idx` (`customerID` ASC),
  INDEX `fk_CustomerAddress_Place1_idx` (`placeID` ASC),
  UNIQUE INDEX `customer_UNIQUE` (`isValid` ASC, `placeID` ASC, `street` ASC, `houseNumber` ASC),
  CONSTRAINT `fk_CustomerAddress_Customer1`
    FOREIGN KEY (`customerID`)
    REFERENCES `Kassensystem`.`Customer` (`customerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomerAddress_Place1`
    FOREIGN KEY (`placeID`)
    REFERENCES `Kassensystem`.`Place` (`placeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Warehouse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Warehouse` (
  `warehouseID` INT NOT NULL AUTO_INCREMENT,
  `warehouseLocation` VARCHAR(70) NOT NULL,
  PRIMARY KEY (`warehouseID`),
  UNIQUE INDEX `warehouseName_UNIQUE` (`warehouseLocation` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`ProductHasWarehouse`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`ProductHasWarehouse` (
  `warehouseID` INT NOT NULL,
  `productID` INT NOT NULL,
  `productAmount` DOUBLE NULL,
  INDEX `fk_ProductHasWarehouse_Warehouse1_idx` (`warehouseID` ASC),
  INDEX `fk_ProductHasWarehouse_Product1_idx` (`productID` ASC),
  PRIMARY KEY (`warehouseID`, `productID`),
  CONSTRAINT `fk_ProductHasWarehouse_Warehouse1`
    FOREIGN KEY (`warehouseID`)
    REFERENCES `Kassensystem`.`Warehouse` (`warehouseID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ProductHasWarehouse_Product1`
    FOREIGN KEY (`productID`)
    REFERENCES `Kassensystem`.`Product` (`productID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`Permission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`Permission` (
  `permissionID` INT NOT NULL AUTO_INCREMENT,
  `permissionName` VARCHAR(100) NOT NULL,
  `description` VARCHAR(200) NULL,
  PRIMARY KEY (`permissionID`),
  UNIQUE INDEX `permissionName_UNIQUE` (`permissionName` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`UserRolehasPermission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`UserRolehasPermission` (
  `userRoleID` INT NOT NULL,
  `permissionID` INT NOT NULL,
  PRIMARY KEY (`userRoleID`, `permissionID`),
  INDEX `fk_UserRole_has_Permission_Permission1_idx` (`permissionID` ASC),
  INDEX `fk_UserRole_has_Permission_UserRole1_idx` (`userRoleID` ASC),
  CONSTRAINT `fk_UserRole_has_Permission_UserRole1`
    FOREIGN KEY (`userRoleID`)
    REFERENCES `Kassensystem`.`UserRole` (`userRoleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_UserRole_has_Permission_Permission1`
    FOREIGN KEY (`permissionID`)
    REFERENCES `Kassensystem`.`Permission` (`permissionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `Kassensystem`.`UserHasPermission`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `Kassensystem`.`UserHasPermission` (
  `userID` INT NOT NULL,
  `permissionID` INT NOT NULL,
  PRIMARY KEY (`userID`, `permissionID`),
  INDEX `fk_User_has_Permission_Permission1_idx` (`permissionID` ASC),
  INDEX `fk_User_has_Permission_User1_idx` (`userID` ASC),
  CONSTRAINT `fk_User_has_Permission_User1`
    FOREIGN KEY (`userID`)
    REFERENCES `Kassensystem`.`User` (`userID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_User_has_Permission_Permission1`
    FOREIGN KEY (`permissionID`)
    REFERENCES `Kassensystem`.`Permission` (`permissionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
